import torch
import torch.nn as nn

from ddn.ddn.pytorch.node import *


############ DDN with constraint ############


class RigitNodeConstraint(EqConstDeclarativeNode):
    """Declarative Rigit node with R^T R = I constraint"""

    def __init__(self):
        super().__init__()

    def objective(self, A, B, w, y):
        """
        A : b x 3 x N
        B : b x 3 x N
        y : b x 3 x 3
        w : b x N

        """
        w = torch.nn.functional.relu(w)
        error = torch.sum((y.bmm(A) - B) ** 2, dim=1)
        return torch.einsum("bn,bn->b", (w**2, error))

    def equality_constraints(self, A, B, w, y):
        eye = torch.eye(y.shape[1])
        eye = eye.reshape((1, y.shape[1], y.shape[2]))
        eyes = eye.repeat(y.shape[0], 1, 1)
        constraint = (y.bmm(y.permute(0, 2, 1)) - eyes) ** 2
        return constraint.sum(-1).sum(-1)

    def solve(self, A, B, w):
        w = torch.nn.functional.relu(w)
        A = A.detach()
        B = B.detach()
        w = w.detach()
        y = self.__solve(A, B, w).requires_grad_()
        return y.detach(), None

    def __solve(self, A, B, w):
        out_batch = []

        for batch in range(w.size(0)):
            W = torch.diag(w[batch])
            B_W = B[batch].mm(W)
            A_W = A[batch].mm(W)
            M = B_W.mm(A_W.permute(1, 0))
            U, _, Vh = torch.linalg.svd(M)
            R = U.mm(Vh)
            det = torch.linalg.det(R)
            if det < 0:
                Vh[:, 2] *= -1
                R = U.mm(Vh)
            out_batch.append(R.unsqueeze(0))

        R = torch.cat(out_batch, 0)

        return R


############ SVD Layer ############


def SVDLayer(A, B, w):
    w = torch.nn.functional.relu(w)

    out_batch = []

    for batch in range(w.size(0)):
        W = torch.diag(w[batch])
        B_W = B[batch].mm(W)
        A_W = A[batch].mm(W)
        M = B_W.mm(A_W.permute(1, 0))
        U, _, Vh = torch.linalg.svd(M)
        R = U.mm(Vh)
        det = torch.linalg.det(R)
        if det < 0:
            Vh_ = Vh.clone()
            Vh_[:, 2] *= -1
            R = U.mm(Vh_)
        out_batch.append(R.unsqueeze(0))

    R = torch.cat(out_batch, 0)

    return R


############ IFT function ############


class IFTFunction(torch.autograd.Function):
    @staticmethod
    def forward(A, B, w):
        """
        A : b x 3 x N
        B : b x 3 x N
        w : b x N
        """

        w = torch.nn.functional.relu(w)

        out_batch = []

        for batch in range(w.size(0)):
            W = torch.diag(w[batch])
            B_W = B[batch].mm(W)
            A_W = A[batch].mm(W)
            M = B_W.mm(A_W.permute(1, 0))
            U, _, Vh = torch.linalg.svd(M)
            R = U.mm(Vh)
            det = torch.linalg.det(R)
            if det < 0:
                Vh_ = Vh.clone()
                Vh_[:, 2] *= -1
                R = U.mm(Vh_)
            out_batch.append(R.unsqueeze(0))

        R = torch.cat(out_batch, 0)

        return R

    @staticmethod
    def setup_context(ctx, inputs, output):
        A, B, w = inputs
        ctx.save_for_backward(A, B, w, output)

    @staticmethod
    def backward(ctx, grad_output):
        """
        A : b x 3 x N
        B : b x 3 x N
        w : b x N
        """

        A, B, w, output = ctx.saved_tensors  # output: b x 3 x 3
        grad_A = grad_B = None

        b = grad_output.shape[0]
        w = torch.nn.functional.relu(w)

        # R: b x 3 x 3; w: b x 4; J_Rw: b x 9 x 4; grad_output: b x 3 x 3
        J_Rw = compute_jacobians(output, w, A, B)  # b x 9 x 4
        J_Rw = torch.einsum("bi,bij->bj", grad_output.view(b, 9), J_Rw)
        grad_w = J_Rw.view(b, 4)

        return None, None, grad_w


class IFTLayer(nn.Module):
    def __init__(self):
        super().__init__()

    def forward(self, A, B, w):
        return IFTFunction.apply(A, B, w)


def compute_jacobians(R, w, A, B):
    """
    E : b x 3 x 3
    w : b x 4
    A : b x 3 x 4
    B : b x 3 x 4
    """
    b = R.shape[0]

    R11 = R[:, 0, 0]
    R12 = R[:, 0, 1]
    R13 = R[:, 0, 2]
    R21 = R[:, 1, 0]
    R22 = R[:, 1, 1]
    R23 = R[:, 1, 2]
    R31 = R[:, 2, 0]
    R32 = R[:, 2, 1]
    R33 = R[:, 2, 2]

    x11 = A[:, 0, 0]
    x12 = A[:, 1, 0]
    x13 = A[:, 2, 0]
    x21 = A[:, 0, 1]
    x22 = A[:, 1, 1]
    x23 = A[:, 2, 1]
    x31 = A[:, 0, 2]
    x32 = A[:, 1, 2]
    x33 = A[:, 2, 2]
    x41 = A[:, 0, 3]
    x42 = A[:, 1, 3]
    x43 = A[:, 2, 3]

    y11 = B[:, 0, 0]
    y12 = B[:, 1, 0]
    y13 = B[:, 2, 0]
    y21 = B[:, 0, 1]
    y22 = B[:, 1, 1]
    y23 = B[:, 2, 1]
    y31 = B[:, 0, 2]
    y32 = B[:, 1, 2]
    y33 = B[:, 2, 2]
    y41 = B[:, 0, 3]
    y42 = B[:, 1, 3]
    y43 = B[:, 2, 3]

    w1 = w[:, 0]
    w2 = w[:, 1]
    w3 = w[:, 2]
    w4 = w[:, 3]

    J_R = torch.zeros((b, 9, 9), device=R.device)

    # R11
    denom_r = 2 * (
        R11**2 * R31
        + R11 * R12 * R32
        + R11 * R13 * R33
        + R21**2 * R31
        + R21 * R22 * R32
        + R21 * R23 * R33
        + R31**3
        + R31 * R32**2
        + R31 * R33**2
        - R31
    )
    const_r = (
        R31 * w1**2 * x11**2
        + R31 * w2**2 * x21**2
        + R31 * w3**2 * x31**2
        + R31 * w4**2 * x41**2
        + R32 * w1**2 * x11 * x12
        + R32 * w2**2 * x21 * x22
        + R32 * w3**2 * x31 * x32
        + R32 * w4**2 * x41 * x42
        + R33 * w1**2 * x11 * x13
        + R33 * w2**2 * x21 * x23
        + R33 * w3**2 * x31 * x33
        + R33 * w4**2 * x41 * x43
        - w1**2 * x11 * y13
        - w2**2 * x21 * y23
        - w3**2 * x31 * y33
        - w4**2 * x41 * y43
    )
    J_R[:, 0, 0] = (
        -1
        / denom_r
        * (
            12 * R11**2
            + 4 * R12**2
            + 4 * R13**2
            + 4 * R21**2
            + 4 * R31**2
            - 4
        )
        * const_r
        + 1
        / denom_r**2
        * (
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R11
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
            )
            * const_r
            * (4 * R11 * R31 + 2 * R12 * R32 + 2 * R13 * R33)
        )
        + 2 * w1**2 * x11**2
        + 2 * w2**2 * x21**2
        + 2 * w3**2 * x31**2
        + 2 * w4**2 * x41**2
    )
    J_R[:, 1, 0] = (
        -1 / denom_r * ((8 * R11 * R12 + 4 * R21 * R22 + 4 * R31 * R32) * const_r)
        + 1
        / denom_r**2
        * (
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
            )
            * const_r
            * (4 * R11 * R31 + 2 * R12 * R32 + 2 * R13 * R33)
        )
        + 2 * w1**2 * x11 * x12
        + 2 * w2**2 * x21 * x22
        + 2 * w3**2 * x31 * x32
        + 2 * w4**2 * x41 * x42
    )
    J_R[:, 2, 0] = (
        -1 / denom_r * ((8 * R11 * R13 + 4 * R21 * R23 + 4 * R31 * R33) * const_r)
        + 1
        / denom_r**2
        * (
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
            )
            * const_r
            * (4 * R11 * R31 + 2 * R12 * R32 + 2 * R13 * R33)
        )
        + 2 * w1**2 * x11 * x13
        + 2 * w2**2 * x21 * x23
        + 2 * w3**2 * x31 * x33
        + 2 * w4**2 * x41 * x43
    )
    J_R[:, 3, 0] = -1 / denom_r * (
        (8 * R11 * R21 + 4 * R12 * R22 + 4 * R13 * R23) * const_r
    ) + 1 / denom_r**2 * (
        (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R21
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
        )
        * const_r
        * (4 * R11 * R31 + 2 * R12 * R32 + 2 * R13 * R33)
    )
    J_R[:, 4, 0] = -1 / denom_r * (4 * R12 * R21 * const_r) + 1 / denom_r**2 * (
        (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
        )
        * const_r
        * (4 * R11 * R31 + 2 * R12 * R32 + 2 * R13 * R33)
    )
    J_R[:, 5, 0] = -1 / denom_r * (4 * R13 * R21 * const_r) + 1 / denom_r**2 * (
        (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
        )
        * const_r
        * (4 * R11 * R31 + 2 * R12 * R32 + 2 * R13 * R33)
    )
    J_R[:, 6, 0] = -1 / denom_r * (
        (8 * R11 * R31 + 4 * R12 * R32 + 4 * R13 * R33) * const_r
    ) + 1 / denom_r**2 * (
        (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R31
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
        )
        * const_r
        * (4 * R11 * R31 + 2 * R12 * R32 + 2 * R13 * R33)
    )
    J_R[:, 7, 0] = -1 / denom_r * ((4 * R12 * R31) * const_r) + 1 / denom_r**2 * (
        (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
        )
        * const_r
        * (4 * R11 * R31 + 2 * R12 * R32 + 2 * R13 * R33)
    )
    J_R[:, 8, 0] = (
        -4 * R13 * R31 * const_r / denom_r
        + (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
        )
        * const_r
        * (4 * R11 * R31 + 2 * R12 * R32 + 2 * R13 * R33)
        / denom_r**2
    )

    # R12
    J_R[:, 0, 1] = (
        -1 / denom_r * ((8 * R11 * R12 + 4 * R21 * R22 + 4 * R31 * R32) * const_r)
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R11
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
            )
            * const_r
            * (R11 * R32)
        )
        + 2 * w1**2 * x11 * x12
        + 2 * w2**2 * x21 * x22
        + 2 * w3**2 * x31 * x32
        + 2 * w4**2 * x41 * x42
    )
    J_R[:, 1, 1] = (
        -1
        / denom_r
        * (
            (
                4 * R11**2
                + 12 * R12**2
                + 4 * R13**2
                + 4 * R22**2
                + 4 * R32**2
                - 4
            )
            * const_r
        )
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
            )
            * const_r
            * (R11 * R32)
        )
        + 2 * w1**2 * x12**2
        + 2 * w2**2 * x22**2
        + 2 * w3**2 * x32**2
        + 2 * w4**2 * x42**2
    )
    J_R[:, 2, 1] = (
        -1 / denom_r * ((8 * R12 * R13 + 4 * R22 * R23 + 4 * R32 * R33) * const_r)
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
            )
            * const_r
            * (R11 * R32)
        )
        + 2 * w1**2 * x12 * x13
        + 2 * w2**2 * x22 * x23
        + 2 * w3**2 * x32 * x33
        + 2 * w4**2 * x42 * x43
    )
    J_R[:, 3, 1] = -1 / denom_r * ((4 * R11 * R22) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R21
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
        )
        * const_r
        * (R11 * R32)
    )
    J_R[:, 4, 1] = -1 / denom_r * (
        (4 * R11 * R21 + 8 * R12 * R22 + 4 * R13 * R23) * const_r
    ) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
        )
        * const_r
        * (R11 * R32)
    )
    J_R[:, 5, 1] = -1 / denom_r * ((4 * R13 * R22) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
        )
        * const_r
        * (R11 * R32)
    )
    J_R[:, 6, 1] = -1 / denom_r * ((4 * R11 * R32) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R31
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
        )
        * const_r
        * (R11 * R32)
    )
    J_R[:, 7, 1] = -1 / denom_r * (
        (4 * R11 * R31 + 8 * R12 * R32 + 4 * R13 * R33) * const_r
    ) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
        )
        * const_r
        * (R11 * R32)
    )
    J_R[:, 8, 1] = -1 / denom_r * ((4 * R13 * R32) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
        )
        * const_r
        * (R11 * R32)
    )

    # R13
    J_R[:, 0, 2] = (
        -1 / denom_r * ((8 * R11 * R13 + 4 * R21 * R23 + 4 * R31 * R33) * const_r)
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R11
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
            )
            * const_r
            * (R11 * R33)
        )
        + 2 * w1**2 * x11 * x13
        + 2 * w2**2 * x21 * x23
        + 2 * w3**2 * x31 * x33
        + 2 * w4**2 * x41 * x43
    )
    J_R[:, 1, 2] = (
        -1 / denom_r * ((8 * R12 * R13 + 4 * R22 * R23 + 4 * R32 * R33) * const_r)
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
            )
            * const_r
            * (R11 * R33)
        )
        + 2 * w1**2 * x12 * x13
        + 2 * w2**2 * x22 * x23
        + 2 * w3**2 * x32 * x33
        + 2 * w4**2 * x42 * x43
    )
    J_R[:, 2, 2] = (
        -1
        / denom_r
        * (
            (
                4 * R11**2
                + 4 * R12**2
                + 12 * R13**2
                + 4 * R23**2
                + 4 * R33**2
                - 4
            )
            * const_r
        )
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
            )
            * const_r
            * (R11 * R33)
        )
        + 2 * w1**2 * x13**2
        + 2 * w2**2 * x23**2
        + 2 * w3**2 * x33**2
        + 2 * w4**2 * x43**2
    )
    J_R[:, 3, 2] = -1 / denom_r * ((4 * R11 * R23) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R21
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
        )
        * const_r
        * (R11 * R33)
    )
    J_R[:, 4, 2] = -1 / denom_r * ((4 * R12 * R23) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
        )
        * const_r
        * (R11 * R33)
    )
    J_R[:, 5, 2] = -1 / denom_r * (
        (4 * R11 * R21 + 4 * R12 * R22 + 8 * R13 * R23) * const_r
    ) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
        )
        * const_r
        * (R11 * R33)
    )
    J_R[:, 6, 2] = -1 / denom_r * ((4 * R11 * R33) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R31
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
        )
        * const_r
        * (R11 * R33)
    )
    J_R[:, 7, 2] = -1 / denom_r * ((4 * R12 * R33) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
        )
        * const_r
        * (R11 * R33)
    )
    J_R[:, 8, 2] = -1 / denom_r * (
        (4 * R11 * R31 + 4 * R12 * R32 + 8 * R13 * R33) * const_r
    ) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
        )
        * const_r
        * (R11 * R33)
    )

    # # R21
    J_R[:, 0, 3] = -1 / denom_r * (
        (8 * R11 * R21 + 4 * R12 * R22 + 4 * R13 * R23) * const_r
    ) + 1 / denom_r**2 * (
        (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R11
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
        )
        * const_r
        * (4 * R21 * R31 + 2 * R22 * R32 + 2 * R23 * R33)
    )
    J_R[:, 1, 3] = -1 / denom_r * ((4 * R11 * R22) * const_r) + 1 / denom_r**2 * (
        (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
        )
        * const_r
        * (4 * R21 * R31 + 2 * R22 * R32 + 2 * R23 * R33)
    )
    J_R[:, 2, 3] = -1 / denom_r * ((4 * R23 * R11) * const_r) + 1 / denom_r**2 * (
        (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
        )
        * const_r
        * (4 * R21 * R31 + 2 * R22 * R32 + 2 * R23 * R33)
    )
    J_R[:, 3, 3] = (
        -1
        / denom_r
        * (
            (
                4 * R11**2
                + 12 * R21**2
                + 4 * R22**2
                + 4 * R23**2
                + 4 * R31**2
                - 4
            )
            * const_r
        )
        + 1
        / denom_r**2
        * (
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R21
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
            )
            * const_r
            * (4 * R21 * R31 + 2 * R22 * R32 + 2 * R23 * R33)
        )
        + 2 * w1**2 * x11**2
        + 2 * w2**2 * x21**2
        + 2 * w3**2 * x31**2
        + 2 * w4**2 * x41**2
    )
    J_R[:, 4, 3] = (
        -1 / denom_r * ((4 * R11 * R12 + 8 * R21 * R22 + 4 * R31 * R32) * const_r)
        + 1
        / denom_r**2
        * (
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
            )
            * const_r
            * (4 * R21 * R31 + 2 * R22 * R32 + 2 * R23 * R33)
        )
        + 2 * w1**2 * x11 * x12
        + 2 * w2**2 * x21 * x22
        + 2 * w3**2 * x31 * x32
        + 2 * w4**2 * x41 * x42
    )
    J_R[:, 5, 3] = (
        -1 / denom_r * ((4 * R11 * R13 + 8 * R21 * R23 + 4 * R31 * R33) * const_r)
        + 1
        / denom_r**2
        * (
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
            )
            * const_r
            * (4 * R21 * R31 + 2 * R22 * R32 + 2 * R23 * R33)
        )
        + 2 * w1**2 * x11 * x13
        + 2 * w2**2 * x21 * x23
        + 2 * w3**2 * x31 * x33
        + 2 * w4**2 * x41 * x43
    )
    J_R[:, 6, 3] = -1 / denom_r * (
        (8 * R21 * R31 + 4 * R22 * R32 + 4 * R23 * R33) * const_r
    ) + 1 / denom_r**2 * (
        (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R31
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
        )
        * const_r
        * (4 * R21 * R31 + 2 * R22 * R32 + 2 * R23 * R33)
    )
    J_R[:, 7, 3] = -1 / denom_r * ((4 * R22 * R31) * const_r) + 1 / denom_r**2 * (
        (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
        )
        * const_r
        * (4 * R21 * R31 + 2 * R22 * R32 + 2 * R23 * R33)
    )
    J_R[:, 8, 3] = -1 / denom_r * ((4 * R23 * R31) * const_r) + 1 / denom_r**2 * (
        (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
        )
        * const_r
        * (4 * R21 * R31 + 2 * R22 * R32 + 2 * R23 * R33)
    )

    # R22
    J_R[:, 0, 4] = -1 / denom_r * ((4 * R12 * R21) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R11
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
        )
        * const_r
        * (R21 * R32)
    )
    J_R[:, 1, 4] = -1 / denom_r * (
        (4 * R11 * R21 + 8 * R12 * R22 + 4 * R13 * R23) * const_r
    ) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
        )
        * const_r
        * (R21 * R32)
    )
    J_R[:, 2, 4] = -1 / denom_r * ((4 * R12 * R23) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
        )
        * const_r
        * (R21 * R32)
    )
    J_R[:, 3, 4] = (
        -1 / denom_r * ((4 * R11 * R12 + 8 * R21 * R22 + 4 * R31 * R32) * const_r)
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R21
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
            )
            * const_r
            * (R21 * R32)
        )
        + 2 * w1**2 * x11 * x12
        + 2 * w2**2 * x21 * x22
        + 2 * w3**2 * x31 * x32
        + 2 * w4**2 * x41 * x42
    )
    J_R[:, 4, 4] = (
        -1
        / denom_r
        * (
            (
                4 * R12**2
                + 4 * R21**2
                + 12 * R22**2
                + 4 * R23**2
                + 4 * R32**2
                - 4
            )
            * const_r
        )
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
            )
            * const_r
            * (R21 * R32)
        )
        + 2 * w1**2 * x12**2
        + 2 * w2**2 * x22**2
        + 2 * w3**2 * x32**2
        + 2 * w4**2 * x42**2
    )
    J_R[:, 5, 4] = (
        -1 / denom_r * ((4 * R12 * R13 + 8 * R22 * R23 + 4 * R32 * R33) * const_r)
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
            )
            * const_r
            * (R21 * R32)
        )
        + 2 * w1**2 * x12 * x13
        + 2 * w2**2 * x22 * x23
        + 2 * w3**2 * x32 * x33
        + 2 * w4**2 * x42 * x43
    )
    J_R[:, 6, 4] = -1 / denom_r * ((4 * R21 * R32) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R31
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
        )
        * const_r
        * (R21 * R32)
    )
    J_R[:, 7, 4] = -1 / denom_r * (
        (4 * R21 * R31 + 8 * R22 * R32 + 4 * R23 * R33) * const_r
    ) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
        )
        * const_r
        * (R21 * R32)
    )
    J_R[:, 8, 4] = -1 / denom_r * ((4 * R23 * R32) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
        )
        * const_r
        * (R21 * R32)
    )

    # R23
    J_R[:, 0, 5] = -1 / denom_r * ((4 * R13 * R21) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R11
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
        )
        * const_r
        * (R21 * R33)
    )
    J_R[:, 1, 5] = -1 / denom_r * ((4 * R13 * R22) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
        )
        * const_r
        * (R21 * R33)
    )
    J_R[:, 2, 5] = -1 / denom_r * (
        (4 * R11 * R21 + 4 * R12 * R22 + 8 * R13 * R23) * const_r
    ) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
        )
        * const_r
        * (R21 * R33)
    )
    J_R[:, 3, 5] = (
        -1 / denom_r * ((4 * R11 * R13 + 8 * R21 * R23 + 4 * R31 * R33) * const_r)
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R21
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
            )
            * const_r
            * (R21 * R33)
        )
        + 2 * w1**2 * x11 * x13
        + 2 * w2**2 * x21 * x23
        + 2 * w3**2 * x31 * x33
        + 2 * w4**2 * x41 * x43
    )
    J_R[:, 4, 5] = (
        -1 / denom_r * ((4 * R12 * R13 + 8 * R22 * R23 + 4 * R32 * R33) * const_r)
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
            )
            * const_r
            * (R21 * R33)
        )
        + 2 * w1**2 * x12 * x13
        + 2 * w2**2 * x22 * x23
        + 2 * w3**2 * x32 * x33
        + 2 * w4**2 * x42 * x43
    )
    J_R[:, 5, 5] = (
        -1
        / denom_r
        * (
            (
                4 * R13**2
                + 4 * R21**2
                + 4 * R22**2
                + 12 * R23**2
                + 4 * R33**2
                - 4
            )
            * const_r
        )
        + 1
        / denom_r**2
        * (
            2
            * (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
            )
            * const_r
            * (R21 * R33)
        )
        + 2 * w1**2 * x13**2
        + 2 * w2**2 * x23**2
        + 2 * w3**2 * x33**2
        + 2 * w4**2 * x43**2
    )
    J_R[:, 6, 5] = -1 / denom_r * ((4 * R21 * R33) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R31
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
        )
        * const_r
        * (R21 * R33)
    )
    J_R[:, 7, 5] = -1 / denom_r * ((4 * R22 * R33) * const_r) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
        )
        * const_r
        * (R21 * R33)
    )
    J_R[:, 8, 5] = -1 / denom_r * (
        (4 * R21 * R31 + 4 * R22 * R32 + 8 * R23 * R33) * const_r
    ) + 1 / denom_r**2 * (
        2
        * (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
        )
        * const_r
        * (R21 * R33)
    )

    # R31
    J_R[:, 0, 6] = -1 / denom_r * (
        (8 * R11 * R31 + 4 * R12 * R32 + 4 * R13 * R33) * const_r
        - (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R11
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
        )
        * (
            w1**2 * x11**2
            + w2**2 * x21**2
            + w3**2 * x31**2
            + w4**2 * x41**2
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R11
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
        )
        * const_r
        * (2 * R11**2 + 2 * R21**2 + 6 * R31**2 + 2 * R32**2 + 2 * R33**2 - 2)
    )
    J_R[:, 1, 6] = -1 / denom_r * (
        (4 * R11 * R32) * const_r
        - (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
        )
        * (
            w1**2 * x11**2
            + w2**2 * x21**2
            + w3**2 * x31**2
            + w4**2 * x41**2
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
        )
        * const_r
        * (2 * R11**2 + 2 * R21**2 + 6 * R31**2 + 2 * R32**2 + 2 * R33**2 - 2)
    )
    J_R[:, 2, 6] = -1 / denom_r * (
        (4 * R11 * R33) * const_r
        - (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
        )
        * (
            w1**2 * x11**2
            + w2**2 * x21**2
            + w3**2 * x31**2
            + w4**2 * x41**2
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
        )
        * const_r
        * (2 * R11**2 + 2 * R21**2 + 6 * R31**2 + 2 * R32**2 + 2 * R33**2 - 2)
    )
    J_R[:, 3, 6] = -1 / denom_r * (
        (8 * R21 * R31 + 4 * R22 * R32 + 4 * R23 * R33) * const_r
        - (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R21
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
        )
        * (
            w1**2 * x11**2
            + w2**2 * x21**2
            + w3**2 * x31**2
            + w4**2 * x41**2
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R21
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
        )
        * const_r
        * (2 * R11**2 + 2 * R21**2 + 6 * R31**2 + 2 * R32**2 + 2 * R33**2 - 2)
    )
    J_R[:, 4, 6] = -1 / denom_r * (
        (4 * R21 * R32) * const_r
        - (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
        )
        * (
            w1**2 * x11**2
            + w2**2 * x21**2
            + w3**2 * x31**2
            + w4**2 * x41**2
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
        )
        * const_r
        * (2 * R11**2 + 2 * R21**2 + 6 * R31**2 + 2 * R32**2 + 2 * R33**2 - 2)
    )
    J_R[:, 5, 6] = -1 / denom_r * (
        (4 * R21 * R33) * const_r
        - (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
        )
        * (
            w1**2 * x11**2
            + w2**2 * x21**2
            + w3**2 * x31**2
            + w4**2 * x41**2
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
        )
        * const_r
        * (2 * R11**2 + 2 * R21**2 + 6 * R31**2 + 2 * R32**2 + 2 * R33**2 - 2)
    )
    J_R[:, 6, 6] = (
        -1
        / denom_r
        * (
            (
                4 * R11**2
                + 4 * R21**2
                + 12 * R31**2
                + 4 * R32**2
                + 4 * R33**2
                - 4
            )
            * const_r
            - (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R31
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
            )
            * (
                w1**2 * x11**2
                + w2**2 * x21**2
                + w3**2 * x31**2
                + w4**2 * x41**2
            )
        )
        + 1
        / denom_r**2
        * (
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R31
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
            )
            * const_r
            * (
                2 * R11**2
                + 2 * R21**2
                + 6 * R31**2
                + 2 * R32**2
                + 2 * R33**2
                - 2
            )
        )
        + 2 * w1**2 * x11**2
        + 2 * w2**2 * x21**2
        + 2 * w3**2 * x31**2
        + 2 * w4**2 * x41**2
    )
    J_R[:, 7, 6] = (
        -1
        / denom_r
        * (
            (4 * R11 * R12 + 4 * R21 * R22 + 8 * R31 * R32) * const_r
            - (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
            )
            * (
                w1**2 * x11**2
                + w2**2 * x21**2
                + w3**2 * x31**2
                + w4**2 * x41**2
            )
        )
        + 1
        / denom_r**2
        * (
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
            )
            * const_r
            * (
                2 * R11**2
                + 2 * R21**2
                + 6 * R31**2
                + 2 * R32**2
                + 2 * R33**2
                - 2
            )
        )
        + 2 * w1**2 * x11 * x12
        + 2 * w2**2 * x21 * x22
        + 2 * w3**2 * x31 * x32
        + 2 * w4**2 * x41 * x42
    )
    J_R[:, 8, 6] = (
        -1
        / denom_r
        * (
            (4 * R11 * R13 + 4 * R21 * R23 + 8 * R31 * R33) * const_r
            - (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
            )
            * (
                w1**2 * x11**2
                + w2**2 * x21**2
                + w3**2 * x31**2
                + w4**2 * x41**2
            )
        )
        + 1
        / denom_r**2
        * (
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
            )
            * const_r
            * (
                2 * R11**2
                + 2 * R21**2
                + 6 * R31**2
                + 2 * R32**2
                + 2 * R33**2
                - 2
            )
        )
        + 2 * w1**2 * x11 * x13
        + 2 * w2**2 * x21 * x23
        + 2 * w3**2 * x31 * x33
        + 2 * w4**2 * x41 * x43
    )

    # R32
    J_R[:, 0, 7] = -1 / denom_r * (
        (4 * R12 * R31) * const_r
        - (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R11
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
        )
        * (
            w1**2 * x11 * x12
            + w2**2 * x21 * x22
            + w3**2 * x31 * x32
            + w4**2 * x41 * x42
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R11
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
        )
        * const_r
        * (2 * R11 * R12 + 2 * R21 * R22 + 4 * R31 * R32)
    )
    J_R[:, 1, 7] = -1 / denom_r * (
        (4 * R11 * R31 + 8 * R12 * R32 + 4 * R13 * R33) * const_r
        - (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
        )
        * (
            w1**2 * x11 * x12
            + w2**2 * x21 * x22
            + w3**2 * x31 * x32
            + w4**2 * x41 * x42
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
        )
        * const_r
        * (2 * R11 * R12 + 2 * R21 * R22 + 4 * R31 * R32)
    )
    J_R[:, 2, 7] = -1 / denom_r * (
        (4 * R12 * R33) * const_r
        - (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
        )
        * (
            w1**2 * x11 * x12
            + w2**2 * x21 * x22
            + w3**2 * x31 * x32
            + w4**2 * x41 * x42
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
        )
        * const_r
        * (2 * R11 * R12 + 2 * R21 * R22 + 4 * R31 * R32)
    )
    J_R[:, 3, 7] = -1 / denom_r * (
        (4 * R22 * R31) * const_r
        - (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R21
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
        )
        * (
            w1**2 * x11 * x12
            + w2**2 * x21 * x22
            + w3**2 * x31 * x32
            + w4**2 * x41 * x42
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R21
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
        )
        * const_r
        * (2 * R11 * R12 + 2 * R21 * R22 + 4 * R31 * R32)
    )
    J_R[:, 4, 7] = -1 / denom_r * (
        (4 * R21 * R31 + 8 * R22 * R32 + 4 * R23 * R33) * const_r
        - (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
        )
        * (
            w1**2 * x11 * x12
            + w2**2 * x21 * x22
            + w3**2 * x31 * x32
            + w4**2 * x41 * x42
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
        )
        * const_r
        * (2 * R11 * R12 + 2 * R21 * R22 + 4 * R31 * R32)
    )
    J_R[:, 5, 7] = -1 / denom_r * (
        (4 * R22 * R33) * const_r
        - (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
        )
        * (
            w1**2 * x11 * x12
            + w2**2 * x21 * x22
            + w3**2 * x31 * x32
            + w4**2 * x41 * x42
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
        )
        * const_r
        * (2 * R11 * R12 + 2 * R21 * R22 + 4 * R31 * R32)
    )
    J_R[:, 6, 7] = (
        -1
        / denom_r
        * (
            (4 * R11 * R12 + 4 * R21 * R22 + 8 * R31 * R32) * const_r
            - (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R31
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
            )
            * (
                w1**2 * x11 * x12
                + w2**2 * x21 * x22
                + w3**2 * x31 * x32
                + w4**2 * x41 * x42
            )
        )
        + 1
        / denom_r**2
        * (
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R31
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
            )
            * const_r
            * (2 * R11 * R12 + 2 * R21 * R22 + 4 * R31 * R32)
        )
        + 2 * w1**2 * x11 * x12
        + 2 * w2**2 * x21 * x22
        + 2 * w3**2 * x31 * x32
        + 2 * w4**2 * x41 * x42
    )
    J_R[:, 7, 7] = (
        -1
        / denom_r
        * (
            (
                4 * R12**2
                + 4 * R22**2
                + 4 * R31**2
                + 12 * R32**2
                + 4 * R33**2
                - 4
            )
            * const_r
            - (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
            )
            * (
                w1**2 * x11 * x12
                + w2**2 * x21 * x22
                + w3**2 * x31 * x32
                + w4**2 * x41 * x42
            )
        )
        + 1
        / denom_r**2
        * (
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
            )
            * const_r
            * (2 * R11 * R12 + 2 * R21 * R22 + 4 * R31 * R32)
        )
        + 2 * w1**2 * x12**2
        + 2 * w2**2 * x22**2
        + 2 * w3**2 * x32**2
        + 2 * w4**2 * x42**2
    )
    J_R[:, 8, 7] = (
        -1
        / denom_r
        * (
            (4 * R12 * R13 + 4 * R22 * R23 + 8 * R32 * R33) * const_r
            - (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
            )
            * (
                w1**2 * x11 * x12
                + w2**2 * x21 * x22
                + w3**2 * x31 * x32
                + w4**2 * x41 * x42
            )
        )
        + 1
        / denom_r**2
        * (
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
            )
            * const_r
            * (2 * R11 * R12 + 2 * R21 * R22 + 4 * R31 * R32)
        )
        + 2 * w1**2 * x12 * x13
        + 2 * w2**2 * x22 * x23
        + 2 * w3**2 * x32 * x33
        + 2 * w4**2 * x42 * x43
    )

    # R33
    J_R[:, 0, 8] = (
        -4 * R13 * R31 * const_r / denom_r
        - 4
        * (
            (R11**2 + R21**2 + R31**2 - 1) * R11
            + (R11 * R12 + R21 * R22 + R31 * R32) * R12
            + (R11 * R13 + R21 * R23 + R31 * R33) * R13
        )
        * (
            w1**2 * x11 * x13
            + w2**2 * x21 * x23
            + w3**2 * x31 * x33
            + w4**2 * x41 * x43
        )
        / denom_r
        + (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R11
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
        )
        * const_r
        * (2 * R11 * R13 + 2 * R21 * R23 + 4 * R31 * R33)
        / denom_r**2
    )
    J_R[:, 1, 8] = -1 / denom_r * (
        (4 * R13 * R32) * const_r
        - (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
        )
        * (
            w1**2 * x11 * x13
            + w2**2 * x21 * x23
            + w3**2 * x31 * x33
            + w4**2 * x41 * x43
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
        )
        * const_r
        * (2 * R11 * R13 + 2 * R21 * R23 + 4 * R31 * R33)
    )
    J_R[:, 2, 8] = -1 / denom_r * (
        (4 * R11 * R31 + 4 * R12 * R32 + 8 * R13 * R33) * const_r
        - (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
        )
        * (
            w1**2 * x11 * x13
            + w2**2 * x21 * x23
            + w3**2 * x31 * x33
            + w4**2 * x41 * x43
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
        )
        * const_r
        * (2 * R11 * R13 + 2 * R21 * R23 + 4 * R31 * R33)
    )
    J_R[:, 3, 8] = -1 / denom_r * (
        (4 * R23 * R31) * const_r
        - (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R21
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
        )
        * (
            w1**2 * x11 * x13
            + w2**2 * x21 * x23
            + w3**2 * x31 * x33
            + w4**2 * x41 * x43
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11**2 + R21**2 + R31**2 - 1) * R21
            + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
            + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
        )
        * const_r
        * (2 * R11 * R13 + 2 * R21 * R23 + 4 * R31 * R33)
    )
    J_R[:, 4, 8] = -1 / denom_r * (
        (4 * R23 * R32) * const_r
        - (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
        )
        * (
            w1**2 * x11 * x13
            + w2**2 * x21 * x23
            + w3**2 * x31 * x33
            + w4**2 * x41 * x43
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
            + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
        )
        * const_r
        * (2 * R11 * R13 + 2 * R21 * R23 + 4 * R31 * R33)
    )
    J_R[:, 5, 8] = -1 / denom_r * (
        (4 * R21 * R31 + 4 * R22 * R32 + 8 * R23 * R33) * const_r
        - (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
        )
        * (
            w1**2 * x11 * x13
            + w2**2 * x21 * x23
            + w3**2 * x31 * x33
            + w4**2 * x41 * x43
        )
    ) + 1 / denom_r**2 * (
        (
            4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
            + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
            + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
        )
        * const_r
        * (2 * R11 * R13 + 2 * R21 * R23 + 4 * R31 * R33)
    )
    J_R[:, 6, 8] = (
        -1
        / denom_r
        * (
            (4 * R11 * R13 + 4 * R21 * R23 + 8 * R31 * R33) * const_r
            - (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R31
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
            )
            * (
                w1**2 * x11 * x13
                + w2**2 * x21 * x23
                + w3**2 * x31 * x33
                + w4**2 * x41 * x43
            )
        )
        + 1
        / denom_r**2
        * (
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R31
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
            )
            * const_r
            * (2 * R11 * R13 + 2 * R21 * R23 + 4 * R31 * R33)
        )
        + 2 * w1**2 * x11 * x13
        + 2 * w2**2 * x21 * x23
        + 2 * w3**2 * x31 * x33
        + 2 * w4**2 * x41 * x43
    )
    J_R[:, 7, 8] = (
        -1
        / denom_r
        * (
            (4 * R12 * R13 + 4 * R22 * R23 + 8 * R32 * R33) * const_r
            - (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
            )
            * (
                w1**2 * x11 * x13
                + w2**2 * x21 * x23
                + w3**2 * x31 * x33
                + w4**2 * x41 * x43
            )
        )
        + 1
        / denom_r**2
        * (
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
            )
            * const_r
            * (2 * R11 * R13 + 2 * R21 * R23 + 4 * R31 * R33)
        )
        + 2 * w1**2 * x12 * x13
        + 2 * w2**2 * x22 * x23
        + 2 * w3**2 * x32 * x33
        + 2 * w4**2 * x42 * x43
    )
    J_R[:, 8, 8] = (
        -1
        / denom_r
        * (
            (
                4 * R13**2
                + 4 * R23**2
                + 4 * R31**2
                + 4 * R32**2
                + 12 * R33**2
                - 4
            )
            * const_r
            - (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
            )
            * (
                w1**2 * x11 * x13
                + w2**2 * x21 * x23
                + w3**2 * x31 * x33
                + w4**2 * x41 * x43
            )
        )
        + 1
        / denom_r**2
        * (
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
            )
            * const_r
            * (2 * R11 * R13 + 2 * R21 * R23 + 4 * R31 * R33)
        )
        + 2 * w1**2 * x13**2
        + 2 * w2**2 * x23**2
        + 2 * w3**2 * x33**2
        + 2 * w4**2 * x43**2
    )

    J_w = torch.zeros((b, 9, 4), device=R.device)

    # w1
    denom_w = (
        2 * R11**2 * R31
        + 2 * R11 * R12 * R32
        + 2 * R11 * R13 * R33
        + 2 * R21**2 * R31
        + 2 * R21 * R22 * R32
        + 2 * R21 * R23 * R33
        + 2 * R31**3
        + 2 * R31 * R32**2
        + 2 * R31 * R33**2
        - 2 * R31
    )
    J_w[:, 0, 0] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R11
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
            )
            * (
                2 * R31 * w1 * x11**2
                + 2 * R32 * w1 * x11 * x12
                + 2 * R33 * w1 * x11 * x13
                - 2 * w1 * x11 * y13
            )
        )
        / denom_w
        + 4 * w1 * (R11 * x11 + R12 * x12 + R13 * x13 - y11) * x11
    )
    J_w[:, 1, 0] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
            )
            * (
                2 * R31 * w1 * x11**2
                + 2 * R32 * w1 * x11 * x12
                + 2 * R33 * w1 * x11 * x13
                - 2 * w1 * x11 * y13
            )
        )
        / denom_w
        + 4 * w1 * (R11 * x11 + R12 * x12 + R13 * x13 - y11) * x12
    )
    J_w[:, 2, 0] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
            )
            * (
                2 * R31 * w1 * x11**2
                + 2 * R32 * w1 * x11 * x12
                + 2 * R33 * w1 * x11 * x13
                - 2 * w1 * x11 * y13
            )
        )
        / denom_w
        + 4 * w1 * (R11 * x11 + R12 * x12 + R13 * x13 - y11) * x13
    )
    J_w[:, 3, 0] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R21
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
            )
            * (
                2 * R31 * w1 * x11**2
                + 2 * R32 * w1 * x11 * x12
                + 2 * R33 * w1 * x11 * x13
                - 2 * w1 * x11 * y13
            )
        )
        / denom_w
        + 4 * w1 * (R21 * x11 + R22 * x12 + R23 * x13 - y12) * x11
    )
    J_w[:, 4, 0] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
            )
            * (
                2 * R31 * w1 * x11**2
                + 2 * R32 * w1 * x11 * x12
                + 2 * R33 * w1 * x11 * x13
                - 2 * w1 * x11 * y13
            )
        )
        / denom_w
        + 4 * w1 * (R21 * x11 + R22 * x12 + R23 * x13 - y12) * x12
    )
    J_w[:, 5, 0] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
            )
            * (
                2 * R31 * w1 * x11**2
                + 2 * R32 * w1 * x11 * x12
                + 2 * R33 * w1 * x11 * x13
                - 2 * w1 * x11 * y13
            )
        )
        / denom_w
        + 4 * w1 * (R21 * x11 + R22 * x12 + R23 * x13 - y12) * x13
    )
    J_w[:, 6, 0] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R31
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
            )
            * (
                2 * R31 * w1 * x11**2
                + 2 * R32 * w1 * x11 * x12
                + 2 * R33 * w1 * x11 * x13
                - 2 * w1 * x11 * y13
            )
        )
        / denom_w
        + 4 * w1 * (R31 * x11 + R32 * x12 + R33 * x13 - y13) * x11
    )
    J_w[:, 7, 0] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
            )
            * (
                2 * R31 * w1 * x11**2
                + 2 * R32 * w1 * x11 * x12
                + 2 * R33 * w1 * x11 * x13
                - 2 * w1 * x11 * y13
            )
        )
        / denom_w
        + 4 * w1 * (R31 * x11 + R32 * x12 + R33 * x13 - y13) * x12
    )
    J_w[:, 8, 0] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
            )
            * (
                2 * R31 * w1 * x11**2
                + 2 * R32 * w1 * x11 * x12
                + 2 * R33 * w1 * x11 * x13
                - 2 * w1 * x11 * y13
            )
        )
        / denom_w
        + 4 * w1 * (R31 * x11 + R32 * x12 + R33 * x13 - y13) * x13
    )

    # w2
    J_w[:, 0, 1] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R11
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
            )
            * (
                2 * R31 * w2 * x21**2
                + 2 * R32 * w2 * x21 * x22
                + 2 * R33 * w2 * x21 * x23
                - 2 * w2 * x21 * y23
            )
        )
        / denom_w
        + 4 * w2 * (R11 * x21 + R12 * x22 + R13 * x23 - y21) * x21
    )
    J_w[:, 1, 1] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
            )
            * (
                2 * R31 * w2 * x21**2
                + 2 * R32 * w2 * x21 * x22
                + 2 * R33 * w2 * x21 * x23
                - 2 * w2 * x21 * y23
            )
        )
        / denom_w
        + 4 * w2 * (R11 * x21 + R12 * x22 + R13 * x23 - y21) * x22
    )
    J_w[:, 2, 1] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
            )
            * (
                2 * R31 * w2 * x21**2
                + 2 * R32 * w2 * x21 * x22
                + 2 * R33 * w2 * x21 * x23
                - 2 * w2 * x21 * y23
            )
        )
        / denom_w
        + 4 * w2 * (R11 * x21 + R12 * x22 + R13 * x23 - y21) * x23
    )
    J_w[:, 3, 1] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R21
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
            )
            * (
                2 * R31 * w2 * x21**2
                + 2 * R32 * w2 * x21 * x22
                + 2 * R33 * w2 * x21 * x23
                - 2 * w2 * x21 * y23
            )
        )
        / denom_w
        + 4 * w2 * (R21 * x21 + R22 * x22 + R23 * x23 - y22) * x21
    )
    J_w[:, 4, 1] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
            )
            * (
                2 * R31 * w2 * x21**2
                + 2 * R32 * w2 * x21 * x22
                + 2 * R33 * w2 * x21 * x23
                - 2 * w2 * x21 * y23
            )
        )
        / denom_w
        + 4 * w2 * (R21 * x21 + R22 * x22 + R23 * x23 - y22) * x22
    )
    J_w[:, 5, 1] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
            )
            * (
                2 * R31 * w2 * x21**2
                + 2 * R32 * w2 * x21 * x22
                + 2 * R33 * w2 * x21 * x23
                - 2 * w2 * x21 * y23
            )
        )
        / denom_w
        + 4 * w2 * (R21 * x21 + R22 * x22 + R23 * x23 - y22) * x23
    )
    J_w[:, 6, 1] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R31
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
            )
            * (
                2 * R31 * w2 * x21**2
                + 2 * R32 * w2 * x21 * x22
                + 2 * R33 * w2 * x21 * x23
                - 2 * w2 * x21 * y23
            )
        )
        / denom_w
        + 4 * w2 * (R31 * x21 + R32 * x22 + R33 * x23 - y23) * x21
    )
    J_w[:, 7, 1] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
            )
            * (
                2 * R31 * w2 * x21**2
                + 2 * R32 * w2 * x21 * x22
                + 2 * R33 * w2 * x21 * x23
                - 2 * w2 * x21 * y23
            )
        )
        / denom_w
        + 4 * w2 * (R31 * x21 + R32 * x22 + R33 * x23 - y23) * x22
    )
    J_w[:, 8, 1] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
            )
            * (
                2 * R31 * w2 * x21**2
                + 2 * R32 * w2 * x21 * x22
                + 2 * R33 * w2 * x21 * x23
                - 2 * w2 * x21 * y23
            )
        )
        / denom_w
        + 4 * w2 * (R31 * x21 + R32 * x22 + R33 * x23 - y23) * x23
    )

    # w3
    J_w[:, 0, 2] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R11
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
            )
            * (
                2 * R31 * w3 * x31**2
                + 2 * R32 * w3 * x31 * x32
                + 2 * R33 * w3 * x31 * x33
                - 2 * w3 * x31 * y33
            )
        )
        / denom_w
        + 4 * w3 * (R11 * x31 + R12 * x32 + R13 * x33 - y31) * x31
    )
    J_w[:, 1, 2] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
            )
            * (
                2 * R31 * w3 * x31**2
                + 2 * R32 * w3 * x31 * x32
                + 2 * R33 * w3 * x31 * x33
                - 2 * w3 * x31 * y33
            )
        )
        / denom_w
        + 4 * w3 * (R11 * x31 + R12 * x32 + R13 * x33 - y31) * x32
    )
    J_w[:, 2, 2] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
            )
            * (
                2 * R31 * w3 * x31**2
                + 2 * R32 * w3 * x31 * x32
                + 2 * R33 * w3 * x31 * x33
                - 2 * w3 * x31 * y33
            )
        )
        / denom_w
        + 4 * w3 * (R11 * x31 + R12 * x32 + R13 * x33 - y31) * x33
    )
    J_w[:, 3, 2] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R21
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
            )
            * (
                2 * R31 * w3 * x31**2
                + 2 * R32 * w3 * x31 * x32
                + 2 * R33 * w3 * x31 * x33
                - 2 * w3 * x31 * y33
            )
        )
        / denom_w
        + 4 * w3 * (R21 * x31 + R22 * x32 + R23 * x33 - y32) * x31
    )
    J_w[:, 4, 2] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
            )
            * (
                2 * R31 * w3 * x31**2
                + 2 * R32 * w3 * x31 * x32
                + 2 * R33 * w3 * x31 * x33
                - 2 * w3 * x31 * y33
            )
        )
        / denom_w
        + 4 * w3 * (R21 * x31 + R22 * x32 + R23 * x33 - y32) * x32
    )
    J_w[:, 5, 2] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
            )
            * (
                2 * R31 * w3 * x31**2
                + 2 * R32 * w3 * x31 * x32
                + 2 * R33 * w3 * x31 * x33
                - 2 * w3 * x31 * y33
            )
        )
        / denom_w
        + 4 * w3 * (R21 * x31 + R22 * x32 + R23 * x33 - y32) * x33
    )
    J_w[:, 6, 2] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R31
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
            )
            * (
                2 * R31 * w3 * x31**2
                + 2 * R32 * w3 * x31 * x32
                + 2 * R33 * w3 * x31 * x33
                - 2 * w3 * x31 * y33
            )
        )
        / denom_w
        + 4 * w3 * (R31 * x31 + R32 * x32 + R33 * x33 - y33) * x31
    )
    J_w[:, 7, 2] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
            )
            * (
                2 * R31 * w3 * x31**2
                + 2 * R32 * w3 * x31 * x32
                + 2 * R33 * w3 * x31 * x33
                - 2 * w3 * x31 * y33
            )
        )
        / denom_w
        + 4 * w3 * (R31 * x31 + R32 * x32 + R33 * x33 - y33) * x32
    )
    J_w[:, 8, 2] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
            )
            * (
                2 * R31 * w3 * x31**2
                + 2 * R32 * w3 * x31 * x32
                + 2 * R33 * w3 * x31 * x33
                - 2 * w3 * x31 * y33
            )
        )
        / denom_w
        + 4 * w3 * (R31 * x31 + R32 * x32 + R33 * x33 - y33) * x33
    )

    # w4
    J_w[:, 0, 3] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R11
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R12
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R13
            )
            * (
                2 * R31 * w4 * x41**2
                + 2 * R32 * w4 * x41 * x42
                + 2 * R33 * w4 * x41 * x43
                - 2 * w4 * x41 * y43
            )
        )
        / denom_w
        + 4 * w4 * (R11 * x41 + R12 * x42 + R13 * x43 - y41) * x41
    )
    J_w[:, 1, 3] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R11
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R12
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R13
            )
            * (
                2 * R31 * w4 * x41**2
                + 2 * R32 * w4 * x41 * x42
                + 2 * R33 * w4 * x41 * x43
                - 2 * w4 * x41 * y43
            )
        )
        / denom_w
        + 4 * w4 * (R11 * x41 + R12 * x42 + R13 * x43 - y41) * x42
    )
    J_w[:, 2, 3] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R11
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R12
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R13
            )
            * (
                2 * R31 * w4 * x41**2
                + 2 * R32 * w4 * x41 * x42
                + 2 * R33 * w4 * x41 * x43
                - 2 * w4 * x41 * y43
            )
        )
        / denom_w
        + 4 * w4 * (R11 * x41 + R12 * x42 + R13 * x43 - y41) * x43
    )
    J_w[:, 3, 3] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R21
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R22
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R23
            )
            * (
                2 * R31 * w4 * x41**2
                + 2 * R32 * w4 * x41 * x42
                + 2 * R33 * w4 * x41 * x43
                - 2 * w4 * x41 * y43
            )
        )
        / denom_w
        + 4 * w4 * (R21 * x41 + R22 * x42 + R23 * x43 - y42) * x41
    )
    J_w[:, 4, 3] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R21
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R22
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R23
            )
            * (
                2 * R31 * w4 * x41**2
                + 2 * R32 * w4 * x41 * x42
                + 2 * R33 * w4 * x41 * x43
                - 2 * w4 * x41 * y43
            )
        )
        / denom_w
        + 4 * w4 * (R21 * x41 + R22 * x42 + R23 * x43 - y42) * x42
    )
    J_w[:, 5, 3] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R21
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R22
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R23
            )
            * (
                2 * R31 * w4 * x41**2
                + 2 * R32 * w4 * x41 * x42
                + 2 * R33 * w4 * x41 * x43
                - 2 * w4 * x41 * y43
            )
        )
        / denom_w
        + 4 * w4 * (R21 * x41 + R22 * x42 + R23 * x43 - y42) * x43
    )
    J_w[:, 6, 3] = (
        -(
            (
                4 * (R11**2 + R21**2 + R31**2 - 1) * R31
                + 4 * (R11 * R12 + R21 * R22 + R31 * R32) * R32
                + 4 * (R11 * R13 + R21 * R23 + R31 * R33) * R33
            )
            * (
                2 * R31 * w4 * x41**2
                + 2 * R32 * w4 * x41 * x42
                + 2 * R33 * w4 * x41 * x43
                - 2 * w4 * x41 * y43
            )
        )
        / denom_w
        + 4 * w4 * (R31 * x41 + R32 * x42 + R33 * x43 - y43) * x41
    )
    J_w[:, 7, 3] = (
        -(
            (
                4 * (R11 * R12 + R21 * R22 + R31 * R32) * R31
                + 4 * (R12**2 + R22**2 + R32**2 - 1) * R32
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R33
            )
            * (
                2 * R31 * w4 * x41**2
                + 2 * R32 * w4 * x41 * x42
                + 2 * R33 * w4 * x41 * x43
                - 2 * w4 * x41 * y43
            )
        )
        / denom_w
        + 4 * w4 * (R31 * x41 + R32 * x42 + R33 * x43 - y43) * x42
    )
    J_w[:, 8, 3] = (
        -(
            (
                4 * (R11 * R13 + R21 * R23 + R31 * R33) * R31
                + 4 * (R12 * R13 + R22 * R23 + R32 * R33) * R32
                + 4 * (R13**2 + R23**2 + R33**2 - 1) * R33
            )
            * (
                2 * R31 * w4 * x41**2
                + 2 * R32 * w4 * x41 * x42
                + 2 * R33 * w4 * x41 * x43
                - 2 * w4 * x41 * y43
            )
        )
        / denom_w
        + 4 * w4 * (R31 * x41 + R32 * x42 + R33 * x43 - y43) * x43
    )

    J_Rw = torch.zeros((b, 9, 4), device=R.device)
    tmp = torch.eye(9, 9, dtype=torch.float, device=R.device)

    for i in range(b):
        try:
            J_Rw[i, :, :] = -torch.inverse(J_R[i, :, :]).mm(J_w[i, :, :])
            tmp = J_R[i, :, :]
        except Exception as e:
            J_Rw[i, :, :] = -torch.inverse(tmp).mm(J_w[i, :, :])

    return J_Rw
